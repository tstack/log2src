name: Rust

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      # ensures each build runs even if one fails
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: log2src
            asset_name: log2src-${{ github.ref_name }}-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: log2src
            asset_name: log2src-${{ github.ref_name }}-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: log2src
            asset_name: log2src-${{ github.ref_name }}-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: log2src.exe
            asset_name: log2src-${{ github.ref_name }}-windows-x64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Setup cross-compilation for ARM64
      if: matrix.target == 'aarch64-apple-darwin'
      run: rustup target add aarch64-apple-darwin

    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Build release binary
      if: startsWith(github.ref, 'refs/tags/')
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary (Unix)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
        cd release && tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

    - name: Package binary (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
      run: |
        mkdir -p release
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} release\
        cd release && 7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

    - name: Upload artifacts
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: release/${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: List files
        run: ls -R release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: log2src ${{ github.ref_name }}
          token: ${{ secrets.L2S_RELEASE }}
          files: release/**/*
          draft: true
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
